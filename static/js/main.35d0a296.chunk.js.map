{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","state","fetch","then","response","json","users","setState","this","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","console","log","dispatch","event","payload","target","value","inialState","logger","createLogger","store","createStore","action","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"kSAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEhBW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCoBPC,G,wDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXnB,OAAQ,IAHE,E,gEAOO,IAAD,OAElBoB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKC,SAAS,CAAEzB,OAAQwB,S,+BAIlC,IACAxB,EAAU0B,KAAKP,MAAfnB,OADD,EAE+B0B,KAAKd,MAApCe,EAFA,EAEAA,YAAaC,EAFb,EAEaA,eACdC,EAAiB7B,EAAO8B,QAAO,SAAAC,GACnC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASN,EAAYK,kBAEvD,OAAQhC,EAAOkC,OAGX,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcqB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQ6B,MANxB,2C,GAvBYM,cAoCHC,eAlDS,SAACjB,GAGvB,OAFAkB,QAAQC,IAAInB,GAEL,CACLQ,YAAaR,EAAMQ,gBAII,SAACY,GAC1B,MAAM,CACJX,eAAgB,SAACY,GAAD,OAAWD,EClBU,CACrC/B,KCJ+B,sBDK/BiC,QDgBmDD,EAAME,OAAOC,YAwCrDP,CAA6ClB,G,gBG3DtD0B,EAAW,CACbjB,YAAa,ICUXkB,EAASC,yBACTC,EAAQC,aDRc,WAAmC,IAAlC7B,EAAiC,uDAAzByB,EAAYK,EAAa,uDAAN,GACpD,OAAOA,EAAOzC,MACV,IDR2B,sBCSvB,OAAO,eAAKW,EAAZ,CAAmBQ,YAAasB,EAAOR,UAC3C,QACI,OAAOtB,KCGqB+B,YAAgBL,IAExDM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.35d0a296.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport SetSearchField, { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  \r\n  return({\r\n    searchField: state.searchField\r\n  });\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  }\r\n\r\n\r\n  render() {\r\n    const { robots} = this.state;\r\n    const {searchField, onSearchChange} = this.props\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return !robots.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from \"./constants\";\r\n\r\n//function rturn obj with new text value\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";","import {CHANGE_SEARCH_FIELD} from \"./constants\";\r\n\r\nconst inialState={\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = inialState, action={} )=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return ({...state, searchField: action.payload});\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider, connect } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport {createLogger} from 'redux-logger';\r\n\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport \"tachyons\";\r\n\r\nimport { searchRobots } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(searchRobots, applyMiddleware(logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}